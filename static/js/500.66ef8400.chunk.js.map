{"version":3,"file":"static/js/500.66ef8400.chunk.js","mappings":"8MAIO,SAASA,EAAT,GAA+B,IAAXC,EAAU,EAAVA,OACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAU,IAAD,EACnB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,mBACGG,EAAMK,aADT,QACkBL,EAAMM,QAFjBN,EAAME,GAMlB,KAGN,C,iICjBM,SAASK,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KASA,OACE,kBAAMH,SARR,SAAsBI,GACpBA,EAAEC,iBAEFL,EAASE,GACTC,EAAS,GACV,EAGC,WACE,kBACEG,KAAK,OACLC,MAAOL,EACPM,aAAa,QACbC,SAAU,SAAAL,GACRD,EAASC,EAAEM,OAAOH,MACnB,KAEH,mBAAQD,KAAK,SAAb,sBAGL,C,gCClBc,SAASK,IAAU,IAAD,EAC/B,GAA0BV,EAAAA,EAAAA,UAAS,IAAnC,eAAOW,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAEhDC,EAAAA,EAAAA,YAAU,WACR,GAAmB,KAAfF,EAAJ,CAIA,IAAMG,EAAgB,mCAAG,qGACJC,EAAAA,EAAAA,IAAWJ,GADP,OACjBK,EADiB,OAGvBT,EAASS,EAAKC,SAHS,2CAAH,qDAMtBH,GARC,CASF,GAAE,CAACH,IAMJ,OACE,iCACE,SAAClB,EAAD,CAAWC,SANK,SAAAO,GAClBS,EAA0B,KAAVT,EAAe,CAAEL,MAAOK,GAAU,CAAC,EACpD,IAKIU,IAAc,SAAC9B,EAAA,EAAD,CAAUC,OAAQwB,EAAOV,MAAOe,MAGpD,C,4MCnCKO,EAAU,mCAEHC,EAAQ,mCAAG,oGACCC,IAAAA,IAAA,kEACsCF,IAFvC,cAChBG,EADgB,yBAKfA,EAASL,MALM,2CAAH,qDAQRD,EAAU,mCAAG,WAAMnB,GAAN,uFACDwB,IAAAA,IAAA,4DACgCF,EADhC,kBACiDtB,IAFhD,cAClByB,EADkB,yBAIjBA,EAASL,MAJQ,2CAAH,sDAOVM,EAAc,mCAAG,WAAMlC,GAAN,uFACLgC,IAAAA,IAAA,6CACiBhC,EADjB,oBAC+B8B,IAF1B,cACtBG,EADsB,yBAKrBA,EAASL,MALY,2CAAH,sDAQdO,EAAY,mCAAG,WAAMnC,GAAN,uFACHgC,IAAAA,IAAA,6CACiBhC,EADjB,4BACuC8B,IAFpC,cACpBG,EADoB,yBAKnBA,GALmB,2CAAH,sDAQZG,EAAc,mCAAG,WAAMpC,GAAN,uFACLgC,IAAAA,IAAA,6CACiBhC,EADjB,4BACuC8B,IAFlC,cACtBG,EADsB,yBAKrBA,GALqB,2CAAH,qD","sources":["components/FilmList/FilmList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport function FilmList({ movies }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title ?? movie.name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nFilmList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport function SearchBar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    onSubmit(query);\n    setQuery('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={query}\n        autoComplete=\"false\"\n        onChange={e => {\n          setQuery(e.target.value);\n        }}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { FilmList } from 'components/FilmList/FilmList';\n\nimport { searchFilm } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  const [films, setFilms] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (queryParam === '') {\n      return;\n    }\n\n    const fetchSearchfilms = async () => {\n      const data = await searchFilm(queryParam);\n\n      setFilms(data.results);\n    };\n\n    fetchSearchfilms();\n  }, [queryParam]);\n\n  const changeQuery = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={changeQuery} />\n      {queryParam && <FilmList movies={films} query={queryParam} />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '8491f0c88fa7dc1f853ccc0c4b339dca';\n\nexport const getFilms = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const searchFilm = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getFilmDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response;\n};\n\nexport const getMovieReview = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return response;\n};\n"],"names":["FilmList","movies","location","useLocation","map","movie","to","id","state","from","title","name","SearchBar","onSubmit","useState","query","setQuery","e","preventDefault","type","value","autoComplete","onChange","target","Movies","films","setFilms","useSearchParams","searchParams","setSearchParams","queryParam","get","useEffect","fetchSearchfilms","searchFilm","data","results","API_KEY","getFilms","axios","response","getFilmDetails","getMovieCast","getMovieReview"],"sourceRoot":""}